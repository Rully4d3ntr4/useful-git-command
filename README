------------------------------------------------
You can add any commands or improve existing one
However, you must follow the current pattern is:

# THE_GIT_COMMAND_EXPLANATION
THE_GIT_COMMAND_1
THE_GIT_COMMAND_2
...
------------------------------------------------

Commits
==============
# Update a commit
git commit --amend

# Reset last commit
git reset --soft HEAD^

Updates
==============
# To update all branches
git pull --all

Branches
==============
# To cherry-pick
git checkout branchname
git log
> Get the sha1
git checkout master
git cherry-pick the_sha1

# Update your branch from master
git checkout ma_branche
git rebase master

# Rebase
git pull --rebase origin master 

# Resolve conflict on a rebase
git add resolvedFile
git rebase --continue 
OR
git rebase --abort

# Merge 2 branches
git checkout master
git merge branch_name

# Remove obsoletes local branches
git remote prune origin

# On message 'your branch is 2 commits...'
git fetch --depth=HEAD

Revert your changes
==============
# Revert a file
git checkout -- FILE 

# Remove a file from staging area
git reset FILE

# Reset your updates
git reset --hard HEAD

# Reset to master on origin
git reset --hard origin/master

# Cancel a commit
git rebase -i HEAD~2
git mergetool
git rebase --continue

Update all local projects
==============
#!/bin/bash
command='git pull'
for i in `ls -d */`; do
   echo Udating ${i}
   cd ${i}
   $command
   cd ..
done

